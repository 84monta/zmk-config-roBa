#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 TAB>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W    &kp E         &kp R                  &kp T                                                                      &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A      &kp S    &kp D         &kp F                  &kp G               &kp LS(LG(S))               &kp SQT                    &kp H            &kp J  &kp K      &kp L    &kp RETURN
&kp Z      &kp X    &kp C         &kp V                  &kp B               &kp LEFT_BRACKET            &kp RIGHT_BRACKET          &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp ESC  &kp LEFT_ALT  &mt LEFT_SHIFT ESCAPE  &lt 2 INT_MUHENKAN  &lt_to_layer_0 3 SPACE      &mt LC(RIGHT_SHIFT) SPACE  &lt 1 BACKSPACE                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2        &kp F3   &kp F4   &kp F5                       &trans     &kp LEFT   &kp UP     &kp RIGHT  &kp DELETE
&kp F6   &kp F7        &kp F8   &kp F9   &kp F10  &trans      &trans  &kp GRAVE  &kp MINUS  &kp DOWN   &kp EQUAL  &kp BACKSPACE
&kp F11  &kp F12       &kp F13  &kp F14  &kp F15  &trans      &trans  &trans     &mkp LCLK  &mkp RCLK  &trans     &kp SEMICOLON
&kp ESC  &kp LEFT_WIN  &trans   &trans   &trans   &trans      &trans  &trans                                      &kp F12
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        NUM {
            bindings = <
&kp N1     &kp N2        &kp N3     &kp N4     &kp N5                                          &kp N6            &kp N7             &kp N8          &kp N9           &kp N0
&kp LC(A)  &kp LC(S)     &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans         &kp UNDERSCORE        &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR       &kp PERCENT
&kp LC(Z)  &kp LC(X)     &kp LC(C)  &kp LC(V)  &mkp LCLK  &mkp RCLK      &kp NON_US_BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp SEMICOLON
&trans     &kp LEFT_WIN  &trans     &trans     &trans     &trans         &trans                &trans                                                                &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        ARROW {
            bindings = <
&kp LC(Q)  &kp LC(W)  &kp LC(E)           &kp LC(R)  &kp LC(T)                       &kp LC(Y)  &kp LC(U)  &kp LC(I)  &kp LC(O)  &kp LC(P)
&kp LC(A)  &kp LC(S)  &kp LC(DOWN_ARROW)  &kp LC(F)  &kp LC(G)  &trans       &trans  &kp LC(H)  &kp LC(J)  &kp LC(K)  &kp LC(L)  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)           &kp LC(V)  &kp LC(B)  &kp TAB      &trans  &kp LC(N)  &kp LC(M)  &trans     &trans     &trans
&kp ESC    &trans     &trans              &trans     &trans     &trans       &trans  &trans                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
